/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gourmet.ui;
import javax.swing.*;
import java.awt.BorderLayout;
import network.*;
import MyUtils.*;
import gourmet.BatchCommandePlat;
import gourmet.CommandePlat;
import gourmet.Config;
import java.io.StringReader;
import java.text.DateFormat;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;
import javax.swing.text.DateFormatter;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
/**
 *
 * @author dodoc
 */
public class ApplicationCuisine extends javax.swing.JFrame {

    /**
     * Creates new form ApplicationCuisine
     */
    NetworkBasicClient clientCuisine;
    private final NetworkBasicServer servCuisine;
    String[]vec_comd;
    
    public ApplicationCuisine() {
        initComponents();
        
        String[]nomColonnes = {"Quantité","Plat","Table","Heure"};
        TableListPlat.setModel(new javax.swing.table.DefaultTableModel(null, nomColonnes));
        
        String[]nomColonnes2 = {"Quantité","Plat","Table","Heure","En préparation", "A enlever", "Enlevé"};
        DefaultTableModel tmodel2 = new DefaultTableModel(null, nomColonnes2)
        {
            @Override
            public boolean isCellEditable(int row,int column){
                return column>3;
            }
            @Override
            public Class<?> getColumnClass(int columnIndex){
                if(columnIndex>3)
                    return Boolean.class;   
                
                return super.getColumnClass(columnIndex);
            }
        };
        TablePlatPrepare.setModel(tmodel2);
        
        servCuisine = new NetworkBasicServer(Config.getInt("port"), checkBoxCommande);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        checkBoxCommande = new javax.swing.JCheckBox();
        buttonCommande = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonCommRecue = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableListPlat = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablePlatPrepare = new javax.swing.JTable();
        buttonRemovePlat = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        checkBoxCommande.setText("Commande reçue");
        checkBoxCommande.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        checkBoxCommande.setEnabled(false);
        checkBoxCommande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCommandeActionPerformed(evt);
            }
        });

        buttonCommande.setText("Voir Commande");
        buttonCommande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCommandeActionPerformed(evt);
            }
        });

        jLabel1.setText(">>");

        jLabel2.setText("?");

        jLabel3.setText("Liste des plats de la commande :");

        buttonCommRecue.setText("Commande reçue !");
        buttonCommRecue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCommRecueActionPerformed(evt);
            }
        });

        TableListPlat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableListPlat);

        jLabel4.setText("Plats en préparation :");

        TablePlatPrepare.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TablePlatPrepare);

        buttonRemovePlat.setText("Prévenir plats à enlever");
        buttonRemovePlat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemovePlatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBoxCommande)
                                .addGap(65, 65, 65)
                                .addComponent(buttonCommande))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buttonRemovePlat)
                .addGap(133, 133, 133))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonCommRecue)
                        .addGap(76, 76, 76))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxCommande)
                    .addComponent(buttonCommande))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(buttonCommRecue))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonRemovePlat)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCommandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCommandeActionPerformed
        DateFormat dfdate = DateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());
        DateFormat dftime = DateFormat.getTimeInstance(DateFormat.SHORT, Locale.getDefault());
        
        String msg = servCuisine.getMessage();
        
        BatchCommandePlat batch;
        
        try {
            JAXBContext context = JAXBContext.newInstance(BatchCommandePlat.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            
            batch = (BatchCommandePlat)unmarshaller.unmarshal(new StringReader(msg));
        
            DefaultTableModel model = (DefaultTableModel)TableListPlat.getModel();
            DefaultTableModel model2 = (DefaultTableModel)TablePlatPrepare.getModel();
            
            for (CommandePlat c: batch.getCommandes()) {
                model.addRow(new Object[] {
                    c.getQuantite(),
                    c.getPlat().getLibelle(),
                    batch.getNumeroTable(),
                    dfdate.format(batch.getDate()) + dftime.format(batch.getDate()),
                });
                model2.addRow(new Object[] {
                    c.getQuantite(),
                    c.getPlat().getLibelle(),
                    batch.getNumeroTable(),
                    dfdate.format(batch.getDate()) + dftime.format(batch.getDate()),
                    true,
                    false,
                    false,
                });
            }
        } catch (JAXBException ex) {
            Logger.getLogger(ApplicationCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonCommandeActionPerformed

    private void buttonCommRecueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCommRecueActionPerformed
        if(clientCuisine == null) {
            clientCuisine = new NetworkBasicClient(Config.get("ip"), Config.getInt("port2"));
        }

        System.out.println("COMMRECUE");
        servCuisine.sendMessage("Commanderecue");
        checkBoxCommande.setSelected(false);
    }//GEN-LAST:event_buttonCommRecueActionPerformed

    
    private void CheckBoxCommandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxCommandeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBoxCommandeActionPerformed

    private void buttonRemovePlatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemovePlatActionPerformed
        // Faire plus tard la condition : Si à enlever est coché
        // Le faire quand les plats y seront
        String v_comm_done = new String();
        String ok;
        
        if (clientCuisine != null)
        { 
            int NbLine = TablePlatPrepare.getModel().getRowCount();
            for(int i=0;i<NbLine;i++)
            {
                DefaultTableModel model2 = (DefaultTableModel)TablePlatPrepare.getModel();
                System.out.println("here");
                if((boolean)TablePlatPrepare.getModel().getValueAt(i, 5)==true)
                {
                    System.out.println("here mother fucker");
                    TablePlatPrepare.getModel().setValueAt(false, i, 4);
                    v_comm_done += (String)TablePlatPrepare.getModel().getValueAt(i,0)+"&"+
                            (String)TablePlatPrepare.getModel().getValueAt(i,1)+"&"+
                            (String)TablePlatPrepare.getModel().getValueAt(i,2)+"&"+
                            (String)TablePlatPrepare.getModel().getValueAt(i,4)+"&";
                    //model2.removeRow(i);
                    //i--;
                }
                 
            }
            String msg = v_comm_done;
            ok = clientCuisine.sendString(msg);
            
            if(ok.equals("ok"))
            {
                for(int i=0;i<NbLine;i++)
                {
                    DefaultTableModel model2 = (DefaultTableModel)TablePlatPrepare.getModel();
                    if((boolean)TablePlatPrepare.getModel().getValueAt(i, 5)==true)
                    {
                        model2.removeRow(i);
                        i--;
                    }
                 }
            }
            
        }
    }//GEN-LAST:event_buttonRemovePlatActionPerformed

    private void checkBoxCommandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCommandeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCommandeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
/*        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationCuisine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableListPlat;
    private javax.swing.JTable TablePlatPrepare;
    private javax.swing.JButton buttonCommRecue;
    private javax.swing.JButton buttonCommande;
    private javax.swing.JButton buttonRemovePlat;
    private javax.swing.JCheckBox checkBoxCommande;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
