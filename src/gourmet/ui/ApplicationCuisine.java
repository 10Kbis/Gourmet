/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gourmet.ui;

import network.*;
import gourmet.BatchCommandePlat;
import gourmet.BatchPlatsServis;
import gourmet.CommandePlat;
import gourmet.Config;
import java.io.File;
import java.io.StringReader;
import java.io.StringWriter;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
/**
 *
 * @author dodoc
 */
public class ApplicationCuisine extends javax.swing.JFrame {

    /**
     * Creates new form ApplicationCuisine
     */
    NetworkBasicClient clientCuisine;
    private final NetworkBasicServer servCuisine;
    String[]vec_comd;
    ArrayList<CommandePlat> commandes = new ArrayList<>();
    
    public ApplicationCuisine() {
        initComponents();
        load();
        
        servCuisine = new NetworkBasicServer(Config.getInt("port"), checkBoxCommande);
    }

    private void save() {
        DefaultTableModel modelPlatPrepare = (DefaultTableModel)TablePlatPrepare.getModel();
        
        ArrayList<String> dates = new ArrayList<>();
        ArrayList<String> tables = new ArrayList<>();
        
        for (int i = 0; i < modelPlatPrepare.getRowCount(); i++) {
            tables.add((String)modelPlatPrepare.getValueAt(i, 2));
            dates.add((String)modelPlatPrepare.getValueAt(i, 3));
        }
        
        ModelAdapter adapter = new ModelAdapter();
        adapter.setCommandes(commandes);
        adapter.setDates(dates);
        adapter.setTables(tables);
        
        File out = new File(Config.get("cuisine_file"));
            
        try {
            JAXBContext context = JAXBContext.newInstance(ModelAdapter.class);
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            
            marshaller.marshal(adapter, out);
        } catch (JAXBException ex) {
            Logger.getLogger(ApplicationCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void load() {
        File f = new File(Config.get("cuisine_file"));
        if (!f.exists()) {
            return;
        }
        
        try {
            JAXBContext context = JAXBContext.newInstance(ModelAdapter.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            
            ModelAdapter adapter = (ModelAdapter)unmarshaller.unmarshal(f);
            
            DefaultTableModel model = (DefaultTableModel)TablePlatPrepare.getModel();
            
            for (int i = 0; i < adapter.getCommandes().size(); i++) {
                CommandePlat c = adapter.getCommandes().get(i);
                String table = adapter.getTables().get(i);
                String date = adapter.getDates().get(i);
                        
                model.addRow(new Object[] {
                    c.getQuantite(),
                    c.getPlat().getLibelle(),
                    table,
                    date,
                    true,
                    false,
                });
            }
            
            commandes = adapter.getCommandes();
            
        } catch (JAXBException ex) {
            Logger.getLogger(ApplicationCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        checkBoxCommande = new javax.swing.JCheckBox();
        buttonCommande = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        buttonCommRecue = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableListPlat = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablePlatPrepare = new javax.swing.JTable();
        buttonRemovePlat = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        checkBoxCommande.setText("Commande reçue");
        checkBoxCommande.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        checkBoxCommande.setEnabled(false);
        checkBoxCommande.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxCommandeStateChanged(evt);
            }
        });
        checkBoxCommande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCommandeActionPerformed(evt);
            }
        });

        buttonCommande.setText("Voir Commande");
        buttonCommande.setEnabled(false);
        buttonCommande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCommandeActionPerformed(evt);
            }
        });

        jLabel3.setText("Liste des plats de la commande :");

        buttonCommRecue.setText("Commande reçue !");
        buttonCommRecue.setEnabled(false);
        buttonCommRecue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCommRecueActionPerformed(evt);
            }
        });

        TableListPlat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantité", "Plate", "Table", "Heure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableListPlat);

        jLabel4.setText("Plats en préparation :");

        TablePlatPrepare.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantité", "Plat", "Table", "Heure", "En préparation", "A enlever"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablePlatPrepare);

        buttonRemovePlat.setText("Prévenir plats à enlever");
        buttonRemovePlat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemovePlatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(checkBoxCommande)
                        .addGap(65, 65, 65)
                        .addComponent(buttonCommande))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buttonRemovePlat)
                .addGap(133, 133, 133))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonCommRecue)
                        .addGap(76, 76, 76))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxCommande)
                    .addComponent(buttonCommande))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(buttonCommRecue))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonRemovePlat)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCommandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCommandeActionPerformed
        buttonCommande.setEnabled(false);
        buttonCommRecue.setEnabled(true);
        
        DateFormat dfdate = DateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());
        DateFormat dftime = DateFormat.getTimeInstance(DateFormat.SHORT, Locale.getDefault());
        
        String msg = servCuisine.getMessage();
        
        BatchCommandePlat batch;
        
        try {
            JAXBContext context = JAXBContext.newInstance(BatchCommandePlat.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            
            batch = (BatchCommandePlat)unmarshaller.unmarshal(new StringReader(msg));
        
            DefaultTableModel model = (DefaultTableModel)TableListPlat.getModel();
            DefaultTableModel model2 = (DefaultTableModel)TablePlatPrepare.getModel();
            
            for (CommandePlat c: batch.getCommandes()) {
                model.addRow(new Object[] {
                    c.getQuantite(),
                    c.getPlat().getLibelle(),
                    batch.getNumeroTable(),
                    dfdate.format(batch.getDate()) + dftime.format(batch.getDate()),
                });
                model2.addRow(new Object[] {
                    c.getQuantite(),
                    c.getPlat().getLibelle(),
                    batch.getNumeroTable(),
                    dfdate.format(batch.getDate()) + dftime.format(batch.getDate()),
                    true,
                    false,
                });
                commandes.add(c);
            }
        } catch (JAXBException ex) {
            Logger.getLogger(ApplicationCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonCommandeActionPerformed

    private void buttonCommRecueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCommRecueActionPerformed
        buttonCommRecue.setEnabled(false);
        
        if(clientCuisine == null) {
            clientCuisine = new NetworkBasicClient(Config.get("ip"), Config.getInt("port2"));
        }

        System.out.println("COMMRECUE");
        servCuisine.sendMessage("Commanderecue");
        checkBoxCommande.setSelected(false);
    }//GEN-LAST:event_buttonCommRecueActionPerformed

    
    private void CheckBoxCommandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxCommandeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBoxCommandeActionPerformed

    private void buttonRemovePlatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemovePlatActionPerformed
        if (clientCuisine == null) {
            clientCuisine = new NetworkBasicClient(Config.get("ip"), Config.getInt("port2"));
        }
        
        ArrayList<CommandePlat> removed = new ArrayList<>();
        ArrayList<String> tables = new ArrayList<>();
        
        DefaultTableModel model = (DefaultTableModel)TablePlatPrepare.getModel();
        for(int i = 0; i < model.getRowCount(); i++) {
            if ((boolean)model.getValueAt(i, 5)) {
                removed.add(commandes.get(i));
                tables.add((String)model.getValueAt(i, 2));
            }
        }

        if (removed.isEmpty()) {
            return;
        }

        BatchPlatsServis batch = new BatchPlatsServis();
        batch.setCommandes(removed);
        batch.setTables(tables);

        try {
            StringWriter result = new StringWriter();

            JAXBContext context = JAXBContext.newInstance(BatchPlatsServis.class);
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            marshaller.marshal(batch, result);
            String msg = result.toString().replace("\n", "");
            clientCuisine.sendString(msg);

            for(int i = 0; i < model.getRowCount(); i++) {
                if ((boolean)model.getValueAt(i, 5)) {
                    commandes.remove(i);
                    model.removeRow(i);
                    i--;
                }
            }
        } catch (JAXBException ex) {
            Logger.getLogger(ApplicationCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonRemovePlatActionPerformed

    private void checkBoxCommandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCommandeActionPerformed
        if (checkBoxCommande.isSelected()) {
            buttonCommande.setEnabled(true);
        }
    }//GEN-LAST:event_checkBoxCommandeActionPerformed

    private void checkBoxCommandeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxCommandeStateChanged
        if (checkBoxCommande.isSelected()) {
            buttonCommande.setEnabled(true);
        }
    }//GEN-LAST:event_checkBoxCommandeStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        save();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
/*        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationCuisine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationCuisine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableListPlat;
    private javax.swing.JTable TablePlatPrepare;
    private javax.swing.JButton buttonCommRecue;
    private javax.swing.JButton buttonCommande;
    private javax.swing.JButton buttonRemovePlat;
    private javax.swing.JCheckBox checkBoxCommande;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    @XmlRootElement
    private static class ModelAdapter {
        private ArrayList<CommandePlat> commandes;
        private ArrayList<String> dates;
        private ArrayList<String> tables;
        
        @XmlElement
        public ArrayList<CommandePlat> getCommandes() {
            return commandes;
        }
        
        public void setCommandes(ArrayList<CommandePlat> commandes) {
            this.commandes = commandes;
        }
        
        @XmlElement
        public ArrayList<String> getDates() {
            return dates;
        }
        
        public void setDates(ArrayList<String> dates) {
            this.dates = dates;
        }
        
        @XmlElement
        public ArrayList<String> getTables() {
            return tables;
        }
        
        public void setTables(ArrayList<String> tables) {
            this.tables = tables;
        }
        
    }
}
