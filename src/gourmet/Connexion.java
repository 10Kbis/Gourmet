/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gourmet;

import java.io.File;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

/**
 *
 * @author user
 */
public class Connexion extends javax.swing.JDialog {
    private final HashMap<String, String> LOGINS = new HashMap<>();
    private final HashMap<String, Serveur> SERVEURS = new HashMap<>();
    private String _login;
    /**
     * Creates new form Connexion
     * @param config
     */
    public Connexion(Properties config) {
        initComponents();
        updateTime();
        // On execute updateTime() toutes les seconde
        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        executor.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                updateTime();
            }
        }, 0, 1, TimeUnit.SECONDS);
        
        try {
            File f = new File(config.getProperty("serveurs_file"));
            
            JAXBContext context = JAXBContext.newInstance(HashMapServeursAdapter.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            HashMapServeursAdapter m = (HashMapServeursAdapter)unmarshaller.unmarshal(f);
            
            SERVEURS.putAll(m.getServeurs());
        } catch (JAXBException ex) {
            Logger.getLogger(Connexion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        SERVEURS.forEach((key, s) -> {
            LOGINS.put(s.getLogin(), s.getPassword());
        });
    }
    
    /**
     * Mise à jour de l'heure dans la fenêtre de connexion
     */
    private void updateTime() {
        LocalDateTime now = LocalDateTime.now();
        labelHeure.setText(now.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelServeur = new javax.swing.JLabel();
        labelMdp = new javax.swing.JLabel();
        ok = new javax.swing.JButton();
        serveur = new javax.swing.JTextField();
        mdp = new javax.swing.JPasswordField();
        annuler = new javax.swing.JButton();
        labelHeure = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Restaurant \"Le gourmet audacieux\"");

        labelServeur.setText("Serveur :");

        labelMdp.setText("Mot de passe :");

        ok.setText("Ok");
        ok.setMaximumSize(new java.awt.Dimension(86, 27));
        ok.setMinimumSize(new java.awt.Dimension(86, 27));
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        serveur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serveurActionPerformed(evt);
            }
        });

        mdp.setToolTipText("");
        mdp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdpActionPerformed(evt);
            }
        });

        annuler.setText("Annuler");
        annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerActionPerformed(evt);
            }
        });

        labelHeure.setText("HEURE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelServeur)
                            .addComponent(labelMdp)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelHeure))))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(annuler, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mdp, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serveur, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(49, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(labelHeure)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelServeur)
                    .addComponent(serveur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMdp)
                    .addComponent(mdp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annuler)
                    .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        String username = serveur.getText();
        String pass = mdp.getText();
        
        String true_pass = LOGINS.get(username);
        
        if (true_pass != null && true_pass.equals(pass)) {
            _login = username;
            setVisible(false);
            dispose();
        } else {
            JOptionPane.showMessageDialog(
                    this,
                    "La combinaison mot de passe/identifiant est invalide.",
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_okActionPerformed

    private void annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_annulerActionPerformed

    private void serveurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serveurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serveurActionPerformed

    private void mdpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mdpActionPerformed

    public Serveur getServeur() {
        return SERVEURS.get(_login);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annuler;
    private javax.swing.JLabel labelHeure;
    private javax.swing.JLabel labelMdp;
    private javax.swing.JLabel labelServeur;
    private javax.swing.JPasswordField mdp;
    private javax.swing.JButton ok;
    private javax.swing.JTextField serveur;
    // End of variables declaration//GEN-END:variables

    @XmlRootElement
    private static class HashMapServeursAdapter {
        
        
        private HashMap<String, Serveur> serveursMap;
        
        public HashMapServeursAdapter() {
            
        }
        
        @XmlElement(name = "serveurs")
        public void setServeurs(HashMap<String, Serveur> map) {
            serveursMap = map;
        }
        
        public HashMap<String, Serveur>getServeurs() {
            return serveursMap;
        }
    }
}
